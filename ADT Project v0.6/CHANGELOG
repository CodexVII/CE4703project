Changelog
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
24th of November 2014

a) polynomial.c
    	1) Added error type for initialize polynomial
    	2) Added error return for delete polynomial
    	3) Added error check to printpolynomial

b) polynomial.h 
	1) Added enumeration type for pError, returns whether an operation was successful!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
21st of November 2014

Discussed the file with Reiner in today's lab and found several issues
with indexing, however the process in which the polynomials are being
tested is correct. Base application is essentially finished, only require
'interesting' test cases currently.

a) polynomial.c
	modified: void initialisePolynomial(polynomial *a, int size)
	1) Reiner pointed out if malloc does indeed return NULL, there is
	   no need to free it. Hence it doesn't free anymore.
	2) Corrected how memory is allocated to the array.

b) arithmetic.c
	1) All <= operators have now been reduced to <. It was previously
	   designed to match the user input for order however since our
           move to hard coded tests it no longer applies. This also
	   solved issues with deleting polynomials as it was going of
	   range prior.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
20th of November 2014

Due to the removal of any scanf() in our main.c files a lot of changes had
to be made. Particularly to the way we create a dynamic array and how we
add coefficients.

a) polynomial.c
	modified: void initialise(polynomial *a, int size)
	1) Renamed to void initialisePolynomial(polynomial *a, int size)
	2) NULL check has been moved into the function
	3) Frees the polynomial under failure, initialises polynomial to 0 otherwise
	
	modified: void createPolynomial(polynomial *a)
	1) Renamed to addCoeff(polynomial *a, double coeff[])
	2) Now takes an array of values to become the coefficients of the polynomial
	
	modified: void printPolynomial(polynomial *a)
	1) Now adds a '+' sign when applicable
	2) Prints the polynomial with the highest degree first
	
b) polynomial.h
	1) Made adjustments to function declarations where needed.
	
c) main.c
	Description: This file is used to test every single function with given
	static arrays which will be the coefficients of our polynomials.

	Feel free to try your own test cases so we can discover bugs
	and remidy them. However, make sure every time you allocate memory
	that you free is later. Especially if you plan on re-using
	that polynomial.
	
	I've made it to be fairly intuitive to change things as well but
	ask me if there's anything wrong or a better way of doing it.
				 
